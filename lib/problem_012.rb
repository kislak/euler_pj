# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,2
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number
# to have over five hundred divisors?

class TriangleNumberGenerator
  attr_reader :current

  def initialize
    @current = 0
    @step = 1
  end

  def next
    @current += @step
    @step += 1
    @current
  end
end

class DivisorCounter < Problem007
  def initialize
    @sieve = []
    @number = 0
    @result = 0
    @index = 0
    create_sieve
  end

  def count(number)
    @number = number
    @result = 1
    @index = 1
    do_count
    @result
  end

  def do_count
    @sieve.each do |prime|
      break if prime > @number
      counter = count_divisors(prime)
      @result *= (counter + 1)
    end
  end

  def count_divisors(prime)
    counter = 0
    while (@number % prime).zero?
      @number /= prime
      counter += 1
    end
    counter
  end

  def create_sieve
    prepare_sieve
    setup_sieve
    cleanup_sieve
    @sieve.shift
  end
end

class Problem012 < Problem
  LIMIT = 500

  def initialize
    super
    @generator = TriangleNumberGenerator.new
    @counter = DivisorCounter.new
  end

  def calculate
    count = 0

    while count <= LIMIT
      triangle_number = @generator.next
      count = @counter.count(triangle_number)
    end

    @result = triangle_number
  end
end
